{"version":3,"sources":["components/App/App.module.css","components/ContactList/ContactList.module.css","components/ContactForm/ContactForm.module.css","components/Filter/Filter.module.css","components/Container/Container.module.css","components/Input/Input.module.css","components/Label/Label.module.css","components/Container/Container.js","components/Input/Input.js","components/Label/Label.js","components/options.js","redux/contacts/contacts-action.js","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","components/App/App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js"],"names":["module","exports","Container","children","className","s","container","Input","id","type","name","value","handleChange","options","input","onChange","event","pattern","title","required","Label","label","htmlFor","number","addContact","createAction","payload","uuidv4","deleteContact","changeFilter","getItems","state","contacts","items","getFilteredContacts","filter","getFilter","normalizedFilter","toLowerCase","includes","ContactForm","useState","setName","setNumber","nameInputId","numberInputId","useSelector","dispatch","useDispatch","target","reset","form","onSubmit","preventDefault","checkName","newName","find","undefined","alert","autoComplete","button","ContactList","list","map","item","btn__delete","onClick","Filter","App","length","createReducer","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","contactReducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.6a41992f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"App_title__1YcTA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__2T7aG\",\"item\":\"ContactList_item__3YsZK\",\"btn__delete\":\"ContactList_btn__delete__2u4p9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1fuOn\",\"button\":\"ContactForm_button__1MLZK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__3DcZT\",\"input\":\"Filter_input__2DoVp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__3RIox\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Input_input__3PNbO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Label_label__2bY5z\"};","import PropTypes from \"prop-types\";\n\nimport s from \"./Container.module.css\";\nconst Container = ({ children }) => {\n  return <div className={s.container}>{children}</div>;\n};\n\nContainer.propTypes = {\n  children: PropTypes.node,\n};\nexport default Container;\n","import PropTypes from \"prop-types\";\nimport s from \"./Input.module.css\";\nconst Input = ({ id, type, name, value, handleChange, options }) => {\n  return (\n    <input\n      className={s.input}\n      id={id}\n      type={type}\n      name={name}\n      value={value}\n      onChange={(event) => {\n        handleChange(event);\n      }}\n      pattern={options.pattern}\n      title={options.title}\n      required\n    />\n  );\n};\n\nInput.propTypes = {\n  id: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  handleChange: PropTypes.func,\n  options: PropTypes.shape({\n    pattern: PropTypes.string,\n    title: PropTypes.string,\n  }),\n};\nexport default Input;\n","import PropTypes from \"prop-types\";\nimport s from \"./Label.module.css\";\n\nconst Label = ({ id, title, children }) => {\n  return (\n    <label className={s.label} htmlFor={id}>\n      {title}\n      {children}\n    </label>\n  );\n};\n\nLabel.propTypes = {\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string,\n  children: PropTypes.object,\n};\nexport default Label;\n","const options = {\n  name: {\n    pattern: \"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\",\n    title:\n      \"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\",\n  },\n  number: {\n    pattern: \"+?d{1,4}?[-.s]?(?d{1,3}?)?[-.s]?d{1,4}[-.s]?d{1,4}[-.s]?d{1,9}\",\n    title:\n      \"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\",\n  },\n};\n\nexport default options;\n","import { createAction } from \"@reduxjs/toolkit\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nexport const addContact = createAction(\"contacts/add\", (name, number) => ({\n  payload: {\n    id: uuidv4(),\n    name,\n    number,\n  },\n}));\nexport const deleteContact = createAction(\"contacts/delete\");\nexport const changeFilter = createAction(\"contacts/filter\");\n// eslint-disable-next-line import/no-anonymous-default-export\n// export { addContact, deleteContact, changeFilter };\n\n// import * as contactsTypes from './contacts-types';\n\n// const addContact = (name, number) => ({\n//   type: contactsTypes.ADD,\n//   payload: {\n//     id: uuidv4(),\n//     name,\n//     number,\n//   },\n// });\n\n// const deleteContact = contactId => ({\n//   type: contactsTypes.DELETE,\n//   payload: contactId,\n// });\n\n// const changeFilter = value => ({\n//   type: contactsTypes.CHANGE_FILTER,\n//   payload: value,\n// });\n","export const getItems = (state) => state.contacts.items;\nexport const getFilter = (state) => state.contacts.filter;\n\nexport const getFilteredContacts = (state) => {\n  const contacts = getItems(state);\n  const filter = getFilter(state);\n  const normalizedFilter = filter.toLowerCase();\n  return contacts.filter(({ name }) =>\n    name.toLowerCase().includes(normalizedFilter)\n  );\n};\n","import { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport s from \"./ContactForm.module.css\";\nimport Input from \"../Input\";\nimport Label from \"../Label\";\nimport options from \"../options\";\nimport { addContact } from \"../../redux/contacts/contacts-action\";\nimport { getItems } from \"../../redux/contacts/contacts-selectors\";\n\nconst ContactForm = () => {\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n  const nameInputId = uuidv4();\n  const numberInputId = uuidv4();\n\n  const contacts = useSelector(getItems);\n\n  const dispatch = useDispatch();\n  const onSubmit = () => dispatch(addContact(name, number));\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    switch (name) {\n      case \"name\":\n        setName(value);\n        break;\n      case \"number\":\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    const checkName = (newName) =>\n      contacts.find(({ name }) => name === newName);\n\n    if (!checkName(name) ?? checkName(name) !== undefined) {\n      onSubmit(name, number);\n      reset();\n      return;\n    }\n    alert(`${name} is already in contacts`);\n  };\n\n  const reset = () => {\n    setName(\"\");\n    setNumber(\"\");\n  };\n\n  return (\n    <form className={s.form} onSubmit={handleSubmit} autoComplete=\"off\">\n      <Label id={nameInputId} title=\"Name\">\n        <Input\n          id={nameInputId}\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          handleChange={handleChange}\n          options={options.name}\n        />\n      </Label>\n      <Label id={numberInputId} title=\"Number\">\n        <Input\n          id={numberInputId}\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          handleChange={handleChange}\n          options={options.number}\n        />\n      </Label>\n      <button className={s.button} type=\"submit\">\n        add Contact\n      </button>\n    </form>\n  );\n};\n\nexport default ContactForm;\n","import PropTypes from \"prop-types\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { deleteContact } from \"../../redux/contacts/contacts-action\";\nimport { getFilteredContacts } from \"../../redux/contacts/contacts-selectors\";\nimport s from \"./ContactList.module.css\";\n\nconst ContactList = () => {\n  const contacts = useSelector(getFilteredContacts);\n  const dispatch = useDispatch();\n\n  return (\n    <ul className={s.list}>\n      {contacts.map((item) => {\n        const { id, name, number } = item;\n        return (\n          <li key={id} className={s.item}>\n            {name}: {number}\n            <button\n              className={s.btn__delete}\n              type=\"button\"\n              onClick={() => dispatch(deleteContact(id))}\n            >\n              Delete\n            </button>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.array,\n};\n\nexport default ContactList;\n","import PropTypes from \"prop-types\";\nimport { useDispatch } from \"react-redux\";\nimport { changeFilter } from \"../../redux/contacts/contacts-action\";\nimport s from \"./Filter.module.css\";\n\nconst Filter = ({ value }) => {\n  const dispatch = useDispatch();\n  const onChange = (event) => dispatch(changeFilter(event.target.value));\n  return (\n    <label className={s.label}>\n      Find contacts by name\n      <input\n        className={s.input}\n        type=\"text\"\n        value={value}\n        onChange={onChange}\n      ></input>\n    </label>\n  );\n};\n\nexport default Filter;\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};\n","import s from \"./App.module.css\";\nimport Container from \"../Container\";\nimport ContactForm from \"../ContactForm\";\nimport ContactList from \"../ContactList/\";\nimport Filter from \"../Filter\";\nimport { useSelector } from \"react-redux\";\nimport { getItems } from \"../../redux/contacts/contacts-selectors\";\n\nconst App = () => {\n  const contacts = useSelector(getItems);\n\n  return (\n    <>\n      <Container>\n        <h1 className={s.title}>Phonebook</h1>\n        <ContactForm />\n      </Container>\n      {contacts.length > 0 ? (\n        <Container>\n          <h2 className={s.title}>Contacts</h2>\n          <Filter />\n          <ContactList />\n        </Container>\n      ) : (\n        <Container>\n          <h2 className={s.title}>Phone book is empty</h2>\n        </Container>\n      )}\n    </>\n  );\n};\n\nexport default App;\n","import { combineReducers } from \"redux\";\nimport { createReducer } from \"@reduxjs/toolkit\";\nimport { addContact, deleteContact, changeFilter } from \"./contacts-action\";\n\nconst items = createReducer([], {\n  [addContact]: (state, { payload }) => [...state, payload],\n  [deleteContact]: (state, { payload }) =>\n    state.filter((item) => item.id !== payload),\n});\n\nconst filter = createReducer(\"\", {\n  [changeFilter]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n});\n","/* eslint-disable import/no-anonymous-default-export */\nimport { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport logger from \"redux-logger\";\nimport contactReducer from \"./contacts/contacts-reducer\";\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\nconst contactsPersistConfig = {\n  key: \"contacts\",\n  storage,\n  blacklist: [\"filter\"],\n};\n\nconst store = configureStore({\n  reducer: {\n    contacts: persistReducer(contactsPersistConfig, contactReducer),\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === \"development\",\n});\n\nconst persistor = persistStore(store);\n\nexport default { store, persistor };\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\n\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}